import { h, ref, defineComponent, inject, computed } from 'vue';
import { NScrollbar } from '../../scrollbar';
import { NButton } from '../../button';
import { NBaseFocusDetector } from '../../_internal';
import { getTimeUnits, time } from './utils';
import { timePickerInjectionKey } from './interface';
import PanelCol from './PanelCol';
const timePickerPanelProps = {
    actions: {
        type: Array,
        default: () => ['now', 'confirm']
    },
    showHour: {
        type: Boolean,
        default: true
    },
    showMinute: {
        type: Boolean,
        default: true
    },
    showSecond: {
        type: Boolean,
        default: true
    },
    showPeriod: {
        type: Boolean,
        default: true
    },
    isHourInvalid: Boolean,
    isMinuteInvalid: Boolean,
    isSecondInvalid: Boolean,
    isValueInvalid: Boolean,
    hourValue: {
        type: Number,
        default: null
    },
    minuteValue: {
        type: Number,
        default: null
    },
    secondValue: {
        type: Number,
        default: null
    },
    isHourDisabled: Function,
    isMinuteDisabled: Function,
    isSecondDisabled: Function,
    onHourClick: {
        type: Function,
        required: true
    },
    onMinuteClick: {
        type: Function,
        required: true
    },
    onSecondClick: {
        type: Function,
        required: true
    },
    onNowClick: Function,
    nowText: String,
    confirmText: String,
    transitionDisabled: Boolean,
    onConfirmClick: Function,
    onFocusin: Function,
    onFocusout: Function,
    onFocusDetectorFocus: Function,
    onKeydown: Function,
    hours: [Number, Array],
    minutes: [Number, Array],
    seconds: [Number, Array]
};
export default defineComponent({
    name: 'TimePickerPanel',
    props: timePickerPanelProps,
    setup(props) {
        const { mergedThemeRef, mergedClsPrefixRef
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
         } = inject(timePickerInjectionKey);
        const hoursRef = computed(() => {
            const { isHourDisabled, hours } = props;
            return getTimeUnits(time.hours, hours).map((hour) => {
                return {
                    value: hour,
                    disabled: isHourDisabled ? isHourDisabled(Number(hour)) : false
                };
            });
        });
        const minutesRef = computed(() => {
            const { isMinuteDisabled, minutes } = props;
            return getTimeUnits(time.minutes, minutes).map((minute) => {
                return {
                    value: minute,
                    disabled: isMinuteDisabled
                        ? isMinuteDisabled(Number(minute), props.hourValue)
                        : false
                };
            });
        });
        const secondsRef = computed(() => {
            const { isSecondDisabled, seconds } = props;
            return getTimeUnits(time.seconds, seconds).map((second) => {
                return {
                    value: second,
                    disabled: isSecondDisabled
                        ? isSecondDisabled(Number(second), props.minuteValue, props.hourValue)
                        : false
                };
            });
        });
        return {
            mergedTheme: mergedThemeRef,
            mergedClsPrefix: mergedClsPrefixRef,
            hours: hoursRef,
            minutes: minutesRef,
            seconds: secondsRef,
            hourScrollRef: ref(null),
            minuteScrollRef: ref(null),
            secondScrollRef: ref(null)
        };
    },
    render() {
        var _a, _b;
        const { mergedClsPrefix, mergedTheme } = this;
        return h('div', {
            tabindex: 0,
            class: `${mergedClsPrefix}-time-picker-panel`,
            onFocusin: this.onFocusin,
            onFocusout: this.onFocusout,
            onKeydown: this.onKeydown
        }, [
            h("div", { class: `${mergedClsPrefix}-time-picker-cols` },
                this.showHour ? (h("div", { class: [
                        `${mergedClsPrefix}-time-picker-col`,
                        {
                            [`${mergedClsPrefix}-time-picker-col--invalid`]: this.isHourInvalid,
                            [`${mergedClsPrefix}-time-picker-col--transition-disabled`]: this.transitionDisabled
                        }
                    ] },
                    h(NScrollbar, { ref: "hourScrollRef", theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar }, {
                        default: () => [
                            h(PanelCol, { clsPrefix: mergedClsPrefix, data: this.hours, activeValue: this.hourValue, onItemClick: this.onHourClick }),
                            h("div", { class: `${mergedClsPrefix}-time-picker-col__padding` })
                        ]
                    }))) : null,
                this.showMinute ? (h("div", { class: [
                        `${mergedClsPrefix}-time-picker-col`,
                        {
                            [`${mergedClsPrefix}-time-picker-col--transition-disabled`]: this.transitionDisabled,
                            [`${mergedClsPrefix}-time-picker-col--invalid`]: this.isMinuteInvalid
                        }
                    ] },
                    h(NScrollbar, { ref: "minuteScrollRef", theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar }, {
                        default: () => [
                            h(PanelCol, { clsPrefix: mergedClsPrefix, data: this.minutes, activeValue: this.minuteValue, onItemClick: this.onMinuteClick }),
                            h("div", { class: `${mergedClsPrefix}-time-picker-col__padding` })
                        ]
                    }))) : null,
                this.showSecond ? (h("div", { class: [
                        `${mergedClsPrefix}-time-picker-col`,
                        {
                            [`${mergedClsPrefix}-time-picker-col--invalid`]: this.isSecondInvalid,
                            [`${mergedClsPrefix}-time-picker-col--transition-disabled`]: this.transitionDisabled
                        }
                    ] },
                    h(NScrollbar, { ref: "secondScrollRef", theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar }, {
                        default: () => [
                            h(PanelCol, { clsPrefix: mergedClsPrefix, data: this.seconds, activeValue: this.secondValue, onItemClick: this.onSecondClick }),
                            h("div", { class: `${mergedClsPrefix}-time-picker-col__padding` })
                        ]
                    }))) : null),
            h("div", { class: `${mergedClsPrefix}-time-picker-actions` },
                ((_a = this.actions) === null || _a === void 0 ? void 0 : _a.includes('now')) ? (h(NButton, { size: "tiny", theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, onClick: this.onNowClick }, { default: () => this.nowText })) : null,
                ((_b = this.actions) === null || _b === void 0 ? void 0 : _b.includes('confirm')) ? (h(NButton, { size: "tiny", type: "primary", class: `${mergedClsPrefix}-time-picker-actions__confirm`, theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, disabled: this.isValueInvalid, onClick: this.onConfirmClick }, { default: () => this.confirmText })) : null),
            h(NBaseFocusDetector, { onFocus: this.onFocusDetectorFocus })
        ]);
    }
});
