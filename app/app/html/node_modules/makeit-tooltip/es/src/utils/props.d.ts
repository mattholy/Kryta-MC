export declare const tuple: <T extends string[]>(...args: T) => T;
declare const getEvents: (ele?: any, on?: boolean) => {} | {};
declare const getSlot: (instance: any, name?: string, options?: {}) => any[];
declare const getSlotContent: (instance: any, prop?: string, options?: any, exec?: boolean) => any;
export { getSlot, getSlotContent, getEvents };
declare const _default: {
    new (): {};
    defaults: Partial<import("vue-types/dist/types").VueTypesDefaults>;
    sensibleDefaults: boolean | Partial<import("vue-types/dist/types").VueTypesDefaults>;
    readonly any: import("vue-types").VueTypeValidableDef<any>;
    readonly func: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    readonly bool: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    readonly string: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    readonly number: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    readonly array: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    readonly object: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    readonly integer: import("vue-types").VueTypeDef<number> & {
        default: number;
    };
    readonly symbol: import("vue-types").VueTypeDef<symbol>;
    readonly custom: typeof import("vue-types").custom;
    readonly oneOf: typeof import("vue-types").oneOf;
    readonly instanceOf: typeof import("vue-types").instanceOf;
    readonly oneOfType: typeof import("vue-types").oneOfType;
    readonly arrayOf: typeof import("vue-types").arrayOf;
    readonly objectOf: typeof import("vue-types").objectOf;
    readonly shape: typeof import("vue-types").shape;
    extend<T>(props: import("vue-types/dist/types").ExtendProps<any> | import("vue-types/dist/types").ExtendProps<any>[]): T;
    utils: {
        validate<T_1, U>(value: T_1, type: U): boolean;
        toType<T_2 = unknown>(name: string, obj: import("vue-types/dist/types").PropOptions<T_2, T_2>, validable?: boolean): import("vue-types").VueTypeDef<T_2> | import("vue-types").VueTypeValidableDef<T_2>;
    };
};
export default _default;
