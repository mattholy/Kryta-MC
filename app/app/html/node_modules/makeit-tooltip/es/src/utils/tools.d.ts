declare class MiTools {
    /**
     * Whether it is a mobile phone.
     * @returns {boolean}
     */
    isMobile(): boolean;
    /**
     * Clone Node.
     * @param vNode
     * @param nodeProps
     * @param override
     * @param mergeRef
     */
    cloneElement(vNode: any, nodeProps?: {}, override?: boolean, mergeRef?: boolean): import("vue").VNode<unknown, unknown, {
        [key: string]: any;
    }>;
    /**
     * Whether the element is empty.
     * @param elem
     */
    isEmptyElement(elem: any): boolean;
    /**
     * Whether the value is valid.
     * @param value
     */
    isValid(value: any): boolean;
    /**
     * Filter the empty element.
     * @param children
     */
    filterEmpty(children?: any[]): any[];
    /**
     * Request Animation Polyfill.
     */
    requestAnimationFramePolyfill(): (callback: any) => number;
    /**
     * Get Request Animation Frame.
     */
    getRequestAnimationFrame(): any;
    /**
     * Request Animation.
     * @param callback
     * @param delay
     */
    createRequestAnimationFrame(callback: any, delay: number): {
        id: any;
    };
    /**
     * Cancel request animation.
     * @param id
     */
    cancelRequestAnimationFrame(id: any): any;
    random(): string;
    /**
     * Generate unique string.
     * @param upper
     * @returns {string}
     */
    uid(upper?: boolean, prefix?: string): string;
    /**
     * Event binding.
     * @param element
     * @param event
     * @param listener
     * @param useCapture
     */
    on(element: Window | HTMLElement, event: keyof HTMLElementEventMap, listener: (this: HTMLDivElement, evt: HTMLElementEventMap[keyof HTMLElementEventMap]) => any, useCapture?: boolean): void;
    /**
     * Event unbind.
     * @param element
     * @param event
     * @param listener
     * @param useCapture
     */
    off(element: Window | HTMLElement, event: keyof HTMLElementEventMap, listener: (this: HTMLDivElement, evt: HTMLElementEventMap[keyof HTMLElementEventMap]) => any, useCapture?: boolean): void;
    findDOMNode(instance: any): any;
    getElementActualTopLeft(el: HTMLElement, pos?: string): number;
}
declare const _default: MiTools;
export default _default;
