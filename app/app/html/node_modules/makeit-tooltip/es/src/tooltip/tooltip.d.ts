declare const _default: import("vue").DefineComponent<{
    title: import("vue-types").VueTypeValidableDef<any>;
    visible: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    placement: import("vue-types").VueTypeDef<"top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom"> & {
        default: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    };
    trigger: import("vue-types").VueTypeDef<"hover" | "click" | "focus" | "contextmenu"> & {
        default: "hover" | "click" | "focus" | "contextmenu";
    };
    animation: import("vue-types").VueTypeDef<"scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake"> & {
        default: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    };
    animationDuration: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    className: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    forceRender: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    delayShow: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    delayHide: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    autoAdjust: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    container: import("vue-types").VueTypeDef<any>;
    destroy: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    bgColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    textColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}, unknown, {
    id: string;
    prefixCls: string;
    originEvents: {};
    show: boolean;
    position: {};
    direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    offset: number;
    clickOutside: any;
    _container: any;
    _component: any;
}, {}, {
    getContainer(): any;
    createContainer(): void;
    removeContainer(): void;
    saveContainer(elem: any): void;
    onMouseEnter(e: any): void;
    onMouseLeave(e: any): void;
    onMouseDown(e: any): void;
    onClick(e: any): void;
    onTouchStart(e: any): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    fireEvents(type: string, e: any): void;
    onContextmenu(e: any): void;
    onDocumentClick(e: any): void;
    popupVisible(popupVisible: boolean, event: any): void;
    delayPopupVisible(visible: boolean, time: number, event: any): void;
    clearDelayTimer(): void;
    autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible: boolean;
    placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    trigger: "hover" | "click" | "focus" | "contextmenu";
    animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    animationDuration: number;
    className: string;
    forceRender: boolean;
    delayShow: number;
    delayHide: number;
    autoAdjust: boolean;
    destroy: boolean;
    bgColor: string;
    textColor: string;
} & {
    title?: any;
    container?: any;
}>, {
    visible: boolean;
    placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    trigger: "hover" | "click" | "focus" | "contextmenu";
    animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    animationDuration: number;
    className: string;
    forceRender: boolean;
    delayShow: number;
    delayHide: number;
    autoAdjust: boolean;
    destroy: boolean;
    bgColor: string;
    textColor: string;
}>;
export default _default;
