declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            id: string;
            prefixCls: string;
            originEvents: {};
            show: boolean;
            position: {};
            direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            offset: number;
            clickOutside: any;
            _container: any;
            _component: any;
        };
        $props: Partial<{
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        }> & Pick<Readonly<{
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        } & {
            title?: any;
            container?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "container" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class" | "style">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        } & {
            title?: any;
            container?: any;
        }>, unknown, {
            id: string;
            prefixCls: string;
            originEvents: {};
            show: boolean;
            position: {};
            direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            offset: number;
            clickOutside: any;
            _container: any;
            _component: any;
        }, {}, {
            getContainer(): any;
            createContainer(): void;
            removeContainer(): void;
            saveContainer(elem: any): void;
            onMouseEnter(e: any): void;
            onMouseLeave(e: any): void;
            onMouseDown(e: any): void;
            onClick(e: any): void;
            onTouchStart(e: any): void;
            onFocus(e: any): void;
            onBlur(e: any): void;
            fireEvents(type: string, e: any): void;
            onContextmenu(e: any): void;
            onDocumentClick(e: any): void;
            popupVisible(popupVisible: boolean, event: any): void;
            delayPopupVisible(visible: boolean, time: number, event: any): void;
            clearDelayTimer(): void;
            autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        visible: boolean;
        placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
        trigger: "hover" | "click" | "focus" | "contextmenu";
        animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
        animationDuration: number;
        className: string;
        forceRender: boolean;
        delayShow: number;
        delayHide: number;
        autoAdjust: boolean;
        destroy: boolean;
        bgColor: string;
        textColor: string;
    } & {
        title?: any;
        container?: any;
    }> & import("vue").ShallowUnwrapRef<{}> & {
        id: string;
        prefixCls: string;
        originEvents: {};
        show: boolean;
        position: {};
        direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
        offset: number;
        clickOutside: any;
        _container: any;
        _component: any;
    } & {} & {
        getContainer(): any;
        createContainer(): void;
        removeContainer(): void;
        saveContainer(elem: any): void;
        onMouseEnter(e: any): void;
        onMouseLeave(e: any): void;
        onMouseDown(e: any): void;
        onClick(e: any): void;
        onTouchStart(e: any): void;
        onFocus(e: any): void;
        onBlur(e: any): void;
        fireEvents(type: string, e: any): void;
        onContextmenu(e: any): void;
        onDocumentClick(e: any): void;
        popupVisible(popupVisible: boolean, event: any): void;
        delayPopupVisible(visible: boolean, time: number, event: any): void;
        clearDelayTimer(): void;
        autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    visible: boolean;
    placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    trigger: "hover" | "click" | "focus" | "contextmenu";
    animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    animationDuration: number;
    className: string;
    forceRender: boolean;
    delayShow: number;
    delayHide: number;
    autoAdjust: boolean;
    destroy: boolean;
    bgColor: string;
    textColor: string;
} & {
    title?: any;
    container?: any;
}>, unknown, {
    id: string;
    prefixCls: string;
    originEvents: {};
    show: boolean;
    position: {};
    direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    offset: number;
    clickOutside: any;
    _container: any;
    _component: any;
}, {}, {
    getContainer(): any;
    createContainer(): void;
    removeContainer(): void;
    saveContainer(elem: any): void;
    onMouseEnter(e: any): void;
    onMouseLeave(e: any): void;
    onMouseDown(e: any): void;
    onClick(e: any): void;
    onTouchStart(e: any): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    fireEvents(type: string, e: any): void;
    onContextmenu(e: any): void;
    onDocumentClick(e: any): void;
    popupVisible(popupVisible: boolean, event: any): void;
    delayPopupVisible(visible: boolean, time: number, event: any): void;
    clearDelayTimer(): void;
    autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    visible: boolean;
    placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    trigger: "hover" | "click" | "focus" | "contextmenu";
    animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    animationDuration: number;
    className: string;
    forceRender: boolean;
    delayShow: number;
    delayHide: number;
    autoAdjust: boolean;
    destroy: boolean;
    bgColor: string;
    textColor: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            id: string;
            prefixCls: string;
            originEvents: {};
            show: boolean;
            position: {};
            direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            offset: number;
            clickOutside: any;
            _container: any;
            _component: any;
        };
        $props: Partial<{
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        }> & Pick<Readonly<{
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        } & {
            title?: any;
            container?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "container" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class" | "style">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        } & {
            title?: any;
            container?: any;
        }>, unknown, {
            id: string;
            prefixCls: string;
            originEvents: {};
            show: boolean;
            position: {};
            direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            offset: number;
            clickOutside: any;
            _container: any;
            _component: any;
        }, {}, {
            getContainer(): any;
            createContainer(): void;
            removeContainer(): void;
            saveContainer(elem: any): void;
            onMouseEnter(e: any): void;
            onMouseLeave(e: any): void;
            onMouseDown(e: any): void;
            onClick(e: any): void;
            onTouchStart(e: any): void;
            onFocus(e: any): void;
            onBlur(e: any): void;
            fireEvents(type: string, e: any): void;
            onContextmenu(e: any): void;
            onDocumentClick(e: any): void;
            popupVisible(popupVisible: boolean, event: any): void;
            delayPopupVisible(visible: boolean, time: number, event: any): void;
            clearDelayTimer(): void;
            autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            visible: boolean;
            placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
            trigger: "hover" | "click" | "focus" | "contextmenu";
            animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
            animationDuration: number;
            className: string;
            forceRender: boolean;
            delayShow: number;
            delayHide: number;
            autoAdjust: boolean;
            destroy: boolean;
            bgColor: string;
            textColor: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        visible: boolean;
        placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
        trigger: "hover" | "click" | "focus" | "contextmenu";
        animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
        animationDuration: number;
        className: string;
        forceRender: boolean;
        delayShow: number;
        delayHide: number;
        autoAdjust: boolean;
        destroy: boolean;
        bgColor: string;
        textColor: string;
    } & {
        title?: any;
        container?: any;
    }> & import("vue").ShallowUnwrapRef<{}> & {
        id: string;
        prefixCls: string;
        originEvents: {};
        show: boolean;
        position: {};
        direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
        offset: number;
        clickOutside: any;
        _container: any;
        _component: any;
    } & {} & {
        getContainer(): any;
        createContainer(): void;
        removeContainer(): void;
        saveContainer(elem: any): void;
        onMouseEnter(e: any): void;
        onMouseLeave(e: any): void;
        onMouseDown(e: any): void;
        onClick(e: any): void;
        onTouchStart(e: any): void;
        onFocus(e: any): void;
        onBlur(e: any): void;
        fireEvents(type: string, e: any): void;
        onContextmenu(e: any): void;
        onDocumentClick(e: any): void;
        popupVisible(popupVisible: boolean, event: any): void;
        delayPopupVisible(visible: boolean, time: number, event: any): void;
        clearDelayTimer(): void;
        autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    visible: boolean;
    placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    trigger: "hover" | "click" | "focus" | "contextmenu";
    animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    animationDuration: number;
    className: string;
    forceRender: boolean;
    delayShow: number;
    delayHide: number;
    autoAdjust: boolean;
    destroy: boolean;
    bgColor: string;
    textColor: string;
} & {
    title?: any;
    container?: any;
}>, unknown, {
    id: string;
    prefixCls: string;
    originEvents: {};
    show: boolean;
    position: {};
    direction: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    offset: number;
    clickOutside: any;
    _container: any;
    _component: any;
}, {}, {
    getContainer(): any;
    createContainer(): void;
    removeContainer(): void;
    saveContainer(elem: any): void;
    onMouseEnter(e: any): void;
    onMouseLeave(e: any): void;
    onMouseDown(e: any): void;
    onClick(e: any): void;
    onTouchStart(e: any): void;
    onFocus(e: any): void;
    onBlur(e: any): void;
    fireEvents(type: string, e: any): void;
    onContextmenu(e: any): void;
    onDocumentClick(e: any): void;
    popupVisible(popupVisible: boolean, event: any): void;
    delayPopupVisible(visible: boolean, time: number, event: any): void;
    clearDelayTimer(): void;
    autoAdjustPlacement(targetElem: HTMLElement, contentElem: HTMLElement): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    visible: boolean;
    placement: "top" | "topLeft" | "topRight" | "top-left" | "top-right" | "left" | "leftTop" | "leftBottom" | "left-top" | "left-bottom" | "bottom" | "bottomLeft" | "bottomRight" | "bottom-left" | "bottom-right" | "right" | "rightTop" | "rightBottom" | "right-top" | "right-bottom";
    trigger: "hover" | "click" | "focus" | "contextmenu";
    animation: "scale" | "newspaper" | "sticky" | "sign" | "flip" | "flip-horizontal" | "flip-vertical" | "shake";
    animationDuration: number;
    className: string;
    forceRender: boolean;
    delayShow: number;
    delayHide: number;
    autoAdjust: boolean;
    destroy: boolean;
    bgColor: string;
    textColor: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
