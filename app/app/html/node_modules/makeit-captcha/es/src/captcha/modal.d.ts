declare const _default: import("vue").DefineComponent<{
    show: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    image: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    position: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    mask: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    maskClosable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    themeColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    bgColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    boxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    boxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    boxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    maxTries: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    verifyParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    verifyAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onModalClose: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, unknown, {
    prefixCls: string;
    loading: boolean;
    background: string;
    target: string;
    avatar: string;
    powered: string;
    ctx: {
        image: any;
        block: any;
    };
    elements: {
        slider: any;
        block: any;
    };
    coordinate: {
        x: number;
        y: number;
        offset: number;
    };
    size: {
        width: number;
        height: number;
    };
    block: {
        size: number;
        radius: number;
        PI: number;
        real: number;
    };
    drag: {
        moving: boolean;
        originX: number;
        originY: number;
        offset: number;
    };
    time: {
        start: any;
        end: any;
    };
    check: {};
    _background: any;
}, {}, {
    init(): void;
    initModal(): void;
    refreshCaptcha(): void;
    initCaptcha(): void;
    initImage(elem: HTMLElement): void;
    initImageElem(): void;
    imageToBase64(callback: Function): void;
    drawBlock(ctx: CanvasRenderingContext2D, direction: any, operation: string): void;
    drawBlockPosition(): void;
    drawBlockDirection(): any;
    getBoundingClientRect(elem: HTMLElement, specific?: any): any;
    dragStart(event: any): void;
    dragMoving(event: any): false;
    dragEnd(): void;
    dragFinish(): void;
    dragReset(): void;
    checkVerificationCode(): Promise<void>;
    setCheckData(): void;
    closeModal(status?: string, data?: any): void;
    getArrowElem(): JSX.Element;
    getMaskElem(): JSX.Element;
    getContentLoadingElem(): JSX.Element;
    getContentInfoElem(): JSX.Element;
    getContentResultElem(): JSX.Element;
    getSliderTrackElem(): JSX.Element;
    getSliderBtnElem(): JSX.Element;
    getPanelActionElem(): JSX.Element;
    getPanelCopyrightElem(): JSX.Element;
    getContentElem(): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    themeColor: string;
    bgColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    image: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    show: boolean;
    position: {
        [key: string]: any;
    };
    onModalClose: (...args: any[]) => any;
} & {}>, {
    themeColor: string;
    bgColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    image: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    show: boolean;
    position: {
        [key: string]: any;
    };
    onModalClose: (...args: any[]) => any;
}>;
export default _default;
