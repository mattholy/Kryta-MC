declare const _default: import("vue").DefineComponent<{
    width: import("vue-types").VueTypeDef<string | number> & {
        default: string | number;
    };
    height: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    radius: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    themeColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    bgColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    borderColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    textColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    boxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    boxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    boxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    modalBgColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    modalBoxShadow: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    modalBoxShadowColor: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    modalBoxShadowBlur: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    image: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    logo: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    mask: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    maskClosable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    } & {
        default: boolean;
    };
    maxTries: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    initParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    initAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    verifyParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    verifyAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    checkParams: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    checkAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onSuccess: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onInit: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChecked: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, unknown, {
    prefixCls: string;
    target: string;
    avatar: string;
    powered: string;
    init: boolean;
    failed: boolean;
    pass: boolean;
    tip: string;
    msgTimer: any;
    status: {
        ready: boolean;
        scanning: boolean;
        being: boolean;
        success: boolean;
    };
    offset: {
        top: number;
        left: number;
    };
    modal: {
        show: boolean;
        position: {};
        _instance: any;
    };
}, {
    getThemeColorStyle(): {
        backgroundColor: any;
        boxShadow: string;
    };
}, {
    initCaptcha(): void;
    showCaptchaModal(): void;
    closeCaptchaModal(data: any): void;
    initCaptchaModal(image?: string): void;
    showMessage(msg?: string, duration?: number): void;
    success(data: any): void;
    reset(): void;
    resize(): void;
    getCaptchaModalPosition(): {
        top: any;
        left: any;
    };
    saveCaptchaModal(elem: any): void;
    getRadarReadyElem(): JSX.Element;
    getRadarScanElem(): JSX.Element;
    getRadarBeingElem(): JSX.Element;
    getRadarSuccessElem(): JSX.Element;
    getRadarTipElem(): JSX.Element;
    getRadarLogoElem(): JSX.Element;
    getRadarElem(): JSX.Element;
    getSuccessShowElem(): JSX.Element;
    resetStatus(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    logo: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initAction: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    onSuccess: (...args: any[]) => any;
    onInit: (...args: any[]) => any;
    onChecked: (...args: any[]) => any;
} & {}>, {
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    logo: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initAction: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    onSuccess: (...args: any[]) => any;
    onInit: (...args: any[]) => any;
    onChecked: (...args: any[]) => any;
}>;
export default _default;
