declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            prefixCls: string;
            target: string;
            avatar: string;
            powered: string;
            init: boolean;
            failed: boolean;
            pass: boolean;
            tip: string;
            msgTimer: any;
            status: {
                ready: boolean;
                scanning: boolean;
                being: boolean;
                success: boolean;
            };
            offset: {
                top: number;
                left: number;
            };
            modal: {
                show: boolean;
                position: {};
                _instance: any;
            };
        };
        $props: Partial<{
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        }> & Pick<Readonly<{
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class" | "style">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        } & {}>, unknown, {
            prefixCls: string;
            target: string;
            avatar: string;
            powered: string;
            init: boolean;
            failed: boolean;
            pass: boolean;
            tip: string;
            msgTimer: any;
            status: {
                ready: boolean;
                scanning: boolean;
                being: boolean;
                success: boolean;
            };
            offset: {
                top: number;
                left: number;
            };
            modal: {
                show: boolean;
                position: {};
                _instance: any;
            };
        }, {
            getThemeColorStyle(): {
                backgroundColor: any;
                boxShadow: string;
            };
        }, {
            initCaptcha(): void;
            showCaptchaModal(): void;
            closeCaptchaModal(data: any): void;
            initCaptchaModal(image?: string): void;
            showMessage(msg?: string, duration?: number): void;
            success(data: any): void;
            reset(): void;
            resize(): void;
            getCaptchaModalPosition(): {
                top: any;
                left: any;
            };
            saveCaptchaModal(elem: any): void;
            getRadarReadyElem(): JSX.Element;
            getRadarScanElem(): JSX.Element;
            getRadarBeingElem(): JSX.Element;
            getRadarSuccessElem(): JSX.Element;
            getRadarTipElem(): JSX.Element;
            getRadarLogoElem(): JSX.Element;
            getRadarElem(): JSX.Element;
            getSuccessShowElem(): JSX.Element;
            resetStatus(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        width: string | number;
        height: number;
        radius: number;
        themeColor: string;
        bgColor: string;
        borderColor: string;
        textColor: string;
        boxShadow: boolean;
        boxShadowColor: string;
        boxShadowBlur: number;
        modalBgColor: string;
        modalBoxShadow: boolean;
        modalBoxShadowColor: string;
        modalBoxShadowBlur: number;
        image: string;
        logo: string;
        mask: boolean;
        maskClosable: boolean;
        maxTries: number;
        initParams: {
            [key: string]: any;
        };
        initAction: string;
        verifyParams: {
            [key: string]: any;
        };
        verifyAction: string;
        checkParams: {
            [key: string]: any;
        };
        checkAction: string;
        onSuccess: (...args: any[]) => any;
        onInit: (...args: any[]) => any;
        onChecked: (...args: any[]) => any;
    } & {}> & import("vue").ShallowUnwrapRef<{}> & {
        prefixCls: string;
        target: string;
        avatar: string;
        powered: string;
        init: boolean;
        failed: boolean;
        pass: boolean;
        tip: string;
        msgTimer: any;
        status: {
            ready: boolean;
            scanning: boolean;
            being: boolean;
            success: boolean;
        };
        offset: {
            top: number;
            left: number;
        };
        modal: {
            show: boolean;
            position: {};
            _instance: any;
        };
    } & {
        getThemeColorStyle: {
            backgroundColor: any;
            boxShadow: string;
        };
    } & {
        initCaptcha(): void;
        showCaptchaModal(): void;
        closeCaptchaModal(data: any): void;
        initCaptchaModal(image?: string): void;
        showMessage(msg?: string, duration?: number): void;
        success(data: any): void;
        reset(): void;
        resize(): void;
        getCaptchaModalPosition(): {
            top: any;
            left: any;
        };
        saveCaptchaModal(elem: any): void;
        getRadarReadyElem(): JSX.Element;
        getRadarScanElem(): JSX.Element;
        getRadarBeingElem(): JSX.Element;
        getRadarSuccessElem(): JSX.Element;
        getRadarTipElem(): JSX.Element;
        getRadarLogoElem(): JSX.Element;
        getRadarElem(): JSX.Element;
        getSuccessShowElem(): JSX.Element;
        resetStatus(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    logo: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initAction: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    onSuccess: (...args: any[]) => any;
    onInit: (...args: any[]) => any;
    onChecked: (...args: any[]) => any;
} & {}>, unknown, {
    prefixCls: string;
    target: string;
    avatar: string;
    powered: string;
    init: boolean;
    failed: boolean;
    pass: boolean;
    tip: string;
    msgTimer: any;
    status: {
        ready: boolean;
        scanning: boolean;
        being: boolean;
        success: boolean;
    };
    offset: {
        top: number;
        left: number;
    };
    modal: {
        show: boolean;
        position: {};
        _instance: any;
    };
}, {
    getThemeColorStyle(): {
        backgroundColor: any;
        boxShadow: string;
    };
}, {
    initCaptcha(): void;
    showCaptchaModal(): void;
    closeCaptchaModal(data: any): void;
    initCaptchaModal(image?: string): void;
    showMessage(msg?: string, duration?: number): void;
    success(data: any): void;
    reset(): void;
    resize(): void;
    getCaptchaModalPosition(): {
        top: any;
        left: any;
    };
    saveCaptchaModal(elem: any): void;
    getRadarReadyElem(): JSX.Element;
    getRadarScanElem(): JSX.Element;
    getRadarBeingElem(): JSX.Element;
    getRadarSuccessElem(): JSX.Element;
    getRadarTipElem(): JSX.Element;
    getRadarLogoElem(): JSX.Element;
    getRadarElem(): JSX.Element;
    getSuccessShowElem(): JSX.Element;
    resetStatus(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    logo: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initAction: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    onSuccess: (...args: any[]) => any;
    onInit: (...args: any[]) => any;
    onChecked: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: import("vue").App<any>, ...options: any[]) => any) & {
    install?: (app: import("vue").App<any>, ...options: any[]) => any;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            prefixCls: string;
            target: string;
            avatar: string;
            powered: string;
            init: boolean;
            failed: boolean;
            pass: boolean;
            tip: string;
            msgTimer: any;
            status: {
                ready: boolean;
                scanning: boolean;
                being: boolean;
                success: boolean;
            };
            offset: {
                top: number;
                left: number;
            };
            modal: {
                show: boolean;
                position: {};
                _instance: any;
            };
        };
        $props: Partial<{
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        }> & Pick<Readonly<{
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "class" | "style">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        } & {}>, unknown, {
            prefixCls: string;
            target: string;
            avatar: string;
            powered: string;
            init: boolean;
            failed: boolean;
            pass: boolean;
            tip: string;
            msgTimer: any;
            status: {
                ready: boolean;
                scanning: boolean;
                being: boolean;
                success: boolean;
            };
            offset: {
                top: number;
                left: number;
            };
            modal: {
                show: boolean;
                position: {};
                _instance: any;
            };
        }, {
            getThemeColorStyle(): {
                backgroundColor: any;
                boxShadow: string;
            };
        }, {
            initCaptcha(): void;
            showCaptchaModal(): void;
            closeCaptchaModal(data: any): void;
            initCaptchaModal(image?: string): void;
            showMessage(msg?: string, duration?: number): void;
            success(data: any): void;
            reset(): void;
            resize(): void;
            getCaptchaModalPosition(): {
                top: any;
                left: any;
            };
            saveCaptchaModal(elem: any): void;
            getRadarReadyElem(): JSX.Element;
            getRadarScanElem(): JSX.Element;
            getRadarBeingElem(): JSX.Element;
            getRadarSuccessElem(): JSX.Element;
            getRadarTipElem(): JSX.Element;
            getRadarLogoElem(): JSX.Element;
            getRadarElem(): JSX.Element;
            getSuccessShowElem(): JSX.Element;
            resetStatus(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            width: string | number;
            height: number;
            radius: number;
            themeColor: string;
            bgColor: string;
            borderColor: string;
            textColor: string;
            boxShadow: boolean;
            boxShadowColor: string;
            boxShadowBlur: number;
            modalBgColor: string;
            modalBoxShadow: boolean;
            modalBoxShadowColor: string;
            modalBoxShadowBlur: number;
            image: string;
            logo: string;
            mask: boolean;
            maskClosable: boolean;
            maxTries: number;
            initParams: {
                [key: string]: any;
            };
            initAction: string;
            verifyParams: {
                [key: string]: any;
            };
            verifyAction: string;
            checkParams: {
                [key: string]: any;
            };
            checkAction: string;
            onSuccess: (...args: any[]) => any;
            onInit: (...args: any[]) => any;
            onChecked: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        width: string | number;
        height: number;
        radius: number;
        themeColor: string;
        bgColor: string;
        borderColor: string;
        textColor: string;
        boxShadow: boolean;
        boxShadowColor: string;
        boxShadowBlur: number;
        modalBgColor: string;
        modalBoxShadow: boolean;
        modalBoxShadowColor: string;
        modalBoxShadowBlur: number;
        image: string;
        logo: string;
        mask: boolean;
        maskClosable: boolean;
        maxTries: number;
        initParams: {
            [key: string]: any;
        };
        initAction: string;
        verifyParams: {
            [key: string]: any;
        };
        verifyAction: string;
        checkParams: {
            [key: string]: any;
        };
        checkAction: string;
        onSuccess: (...args: any[]) => any;
        onInit: (...args: any[]) => any;
        onChecked: (...args: any[]) => any;
    } & {}> & import("vue").ShallowUnwrapRef<{}> & {
        prefixCls: string;
        target: string;
        avatar: string;
        powered: string;
        init: boolean;
        failed: boolean;
        pass: boolean;
        tip: string;
        msgTimer: any;
        status: {
            ready: boolean;
            scanning: boolean;
            being: boolean;
            success: boolean;
        };
        offset: {
            top: number;
            left: number;
        };
        modal: {
            show: boolean;
            position: {};
            _instance: any;
        };
    } & {
        getThemeColorStyle: {
            backgroundColor: any;
            boxShadow: string;
        };
    } & {
        initCaptcha(): void;
        showCaptchaModal(): void;
        closeCaptchaModal(data: any): void;
        initCaptchaModal(image?: string): void;
        showMessage(msg?: string, duration?: number): void;
        success(data: any): void;
        reset(): void;
        resize(): void;
        getCaptchaModalPosition(): {
            top: any;
            left: any;
        };
        saveCaptchaModal(elem: any): void;
        getRadarReadyElem(): JSX.Element;
        getRadarScanElem(): JSX.Element;
        getRadarBeingElem(): JSX.Element;
        getRadarSuccessElem(): JSX.Element;
        getRadarTipElem(): JSX.Element;
        getRadarLogoElem(): JSX.Element;
        getRadarElem(): JSX.Element;
        getSuccessShowElem(): JSX.Element;
        resetStatus(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    logo: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initAction: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    onSuccess: (...args: any[]) => any;
    onInit: (...args: any[]) => any;
    onChecked: (...args: any[]) => any;
} & {}>, unknown, {
    prefixCls: string;
    target: string;
    avatar: string;
    powered: string;
    init: boolean;
    failed: boolean;
    pass: boolean;
    tip: string;
    msgTimer: any;
    status: {
        ready: boolean;
        scanning: boolean;
        being: boolean;
        success: boolean;
    };
    offset: {
        top: number;
        left: number;
    };
    modal: {
        show: boolean;
        position: {};
        _instance: any;
    };
}, {
    getThemeColorStyle(): {
        backgroundColor: any;
        boxShadow: string;
    };
}, {
    initCaptcha(): void;
    showCaptchaModal(): void;
    closeCaptchaModal(data: any): void;
    initCaptchaModal(image?: string): void;
    showMessage(msg?: string, duration?: number): void;
    success(data: any): void;
    reset(): void;
    resize(): void;
    getCaptchaModalPosition(): {
        top: any;
        left: any;
    };
    saveCaptchaModal(elem: any): void;
    getRadarReadyElem(): JSX.Element;
    getRadarScanElem(): JSX.Element;
    getRadarBeingElem(): JSX.Element;
    getRadarSuccessElem(): JSX.Element;
    getRadarTipElem(): JSX.Element;
    getRadarLogoElem(): JSX.Element;
    getRadarElem(): JSX.Element;
    getSuccessShowElem(): JSX.Element;
    resetStatus(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    width: string | number;
    height: number;
    radius: number;
    themeColor: string;
    bgColor: string;
    borderColor: string;
    textColor: string;
    boxShadow: boolean;
    boxShadowColor: string;
    boxShadowBlur: number;
    modalBgColor: string;
    modalBoxShadow: boolean;
    modalBoxShadowColor: string;
    modalBoxShadowBlur: number;
    image: string;
    logo: string;
    mask: boolean;
    maskClosable: boolean;
    maxTries: number;
    initParams: {
        [key: string]: any;
    };
    initAction: string;
    verifyParams: {
        [key: string]: any;
    };
    verifyAction: string;
    checkParams: {
        [key: string]: any;
    };
    checkAction: string;
    onSuccess: (...args: any[]) => any;
    onInit: (...args: any[]) => any;
    onChecked: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: import("vue").App<any>, ...options: any[]) => any;
});
export default _default;
