import { isVNode as _isVNode } from "vue";
import { createTextVNode as _createTextVNode } from "vue";
import { createVNode as _createVNode } from "vue";

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

import { defineComponent, Teleport } from 'vue';
import axios from 'axios';
import { VerifiedOutlined } from '@ant-design/icons-vue';
import CaptchaModal from './modal';
import PropTypes from '../utils/props';
import tools from '../utils/tools';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !_isVNode(s);
}

export default defineComponent({
  name: 'MiCaptcha',
  props: {
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).def(320),
    height: PropTypes.number,
    radius: PropTypes.number.def(4),
    themeColor: PropTypes.string,
    bgColor: PropTypes.string,
    borderColor: PropTypes.string,
    textColor: PropTypes.string,
    boxShadow: PropTypes.bool.def(true),
    boxShadowColor: PropTypes.string,
    boxShadowBlur: PropTypes.number.def(4),
    modalBgColor: PropTypes.string,
    modalBoxShadow: PropTypes.bool.def(true),
    modalBoxShadowColor: PropTypes.string,
    modalBoxShadowBlur: PropTypes.number,
    image: PropTypes.string,
    logo: PropTypes.string,
    mask: PropTypes.bool.def(true),
    maskClosable: PropTypes.bool.def(true),
    maxTries: PropTypes.number.def(5),
    initParams: PropTypes.object.def({}),
    initAction: PropTypes.string,
    verifyParams: PropTypes.object.def({}),
    verifyAction: PropTypes.string,
    checkParams: PropTypes.object.def({}),
    checkAction: PropTypes.string,
    onSuccess: PropTypes.func,
    onInit: PropTypes.func,
    onChecked: PropTypes.func
  },
  computed: {
    getThemeColorStyle: function getThemeColorStyle() {
      return this.themeColor ? {
        backgroundColor: this.themeColor,
        boxShadow: "inset 0 0 0 1px ".concat(this.themeColor)
      } : null;
    }
  },
  data: function data() {
    return {
      prefixCls: 'mi-captcha',
      target: 'https://admin.makeit.vip/components/captcha',
      avatar: 'https://file.makeit.vip/MIIT/M00/00/00/ajRkHV_pUyOALE2LAAAtlj6Tt_s370.png',
      powered: 'Powered By makeit.vip',
      init: false,
      failed: false,
      pass: false,
      tip: this.initAction ? '正在初始化验证码 ...' : '点击按钮进行验证',
      msgTimer: null,
      status: {
        ready: true,
        scanning: false,
        being: false,
        success: false
      },
      offset: {
        top: 22.5,
        left: 48
      },
      modal: {
        show: false,
        position: {},
        _instance: null
      }
    };
  },
  beforeUnmount: function beforeUnmount() {
    tools.off(window, 'resize', this.resize);
    this.closeCaptchaModal({
      status: 'close'
    });
  },
  mounted: function mounted() {
    this.initCaptcha();
    tools.on(window, 'resize', this.resize);
  },
  methods: {
    initCaptcha: function initCaptcha() {
      var _this = this;

      if (this.initAction) {
        this.tip = '正在初始化验证码 ...';
        axios.get(this.initAction, this.initParams).then(function (res) {
          _newArrowCheck(this, _this);

          this.failed = false;
          this.init = true;
          this.tip = '点击按钮进行验证';
          this.$emit('init', res.data);
        }.bind(this)).catch(function () {
          _newArrowCheck(this, _this);

          this.init = false;
          this.failed = true;
          this.tip = '初始化接口有误，请稍候再试';
        }.bind(this));
      } else {
        this.failed = false;
        this.init = true;
        this.tip = '点击按钮进行验证';
      }
    },
    showCaptchaModal: function showCaptchaModal() {
      var _this2 = this;

      if (!this.init || this.status.success) return;
      this.tip = '智能检测中 ...';
      this.status.ready = false;
      this.status.scanning = true;

      if (this.checkAction) {
        axios.post(this.checkAction, this.checkParams).then(function (res) {
          _newArrowCheck(this, _this2);

          if (res.data.pass) this.pass = true;else this.initCaptchaModal();
          this.$emit('checked', res.data);
        }.bind(this)).catch(function () {
          _newArrowCheck(this, _this2);

          this.pass = false;
          this.initCaptchaModal();
        }.bind(this));
      } else this.initCaptchaModal();
    },
    closeCaptchaModal: function closeCaptchaModal(data) {
      if (data) {
        if (data.status === 'close') this.reset();
        if (data.status === 'success') this.success();

        if (data.status === 'frequently') {
          this.reset();
          this.showMessage("\u5DF2\u8FDE\u7EED\u9519\u8BEF\u8FBE ".concat(this.maxTries, " \u6B21\uFF0C\u8BF7\u7A0D\u5019\u518D\u8BD5"), 5);
        }
      }
    },
    initCaptchaModal: function initCaptchaModal(image) {
      var _image;

      image = (_image = image) !== null && _image !== void 0 ? _image : this.image;
      this.status.scanning = false;
      this.status.being = true;
      this.modal.position = this.getCaptchaModalPosition();
      this.modal.show = true;
      this.tip = '请移动滑块，完成验证';
    },
    showMessage: function showMessage() {
      var _this3 = this;

      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '错误提示';
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
      var name = 'mi-captcha-message';
      var exist = document.getElementById(name);
      if (exist) exist.remove();
      var elem = document.createElement('div');
      elem.id = name;
      elem.className = name;
      elem.innerHTML = "<div class=\"".concat(name, "-content\"><i class=\"mi-icon icon-close\"></i><span>").concat(msg, "</span></div>");
      document.body.appendChild(elem);
      if (this.msgTimer) clearTimeout(this.msgTimer);
      this.msgTimer = setTimeout(function () {
        _newArrowCheck(this, _this3);

        elem.remove();
      }.bind(this), duration * 1000);
    },
    success: function success(data) {
      var _this4 = this;

      this.tip = '通过验证';
      this.$emit('success', data);
      setTimeout(function () {
        _newArrowCheck(this, _this4);

        this.modal.show = false;
        this.status.being = false;
        this.status.success = true;
      }.bind(this));
    },
    reset: function reset() {
      this.modal.show = false;
      this.status.being = false;
      this.status.success = false;
      this.status.scanning = false;
      this.status.ready = true;
      this.tip = '点击按钮进行验证';
    },
    resize: function resize() {
      this.modal.position = this.getCaptchaModalPosition();
    },
    getCaptchaModalPosition: function getCaptchaModalPosition() {
      var elem = this.$refs[this.prefixCls];
      var rect = elem.getBoundingClientRect();
      var top = Math.round(rect.top * 1000) / 1000 + this.offset.top;
      var left = Math.round(rect.left * 1000) / 1000 + this.offset.left;
      return {
        top: top,
        left: left
      };
    },
    saveCaptchaModal: function saveCaptchaModal(elem) {
      this.modal._instance = elem;
    },
    getRadarReadyElem: function getRadarReadyElem() {
      return this.status.ready ? _createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-ready")
      }, [_createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-ring"),
        "style": this.getThemeColorStyle
      }, null), _createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-dot"),
        "style": this.getThemeColorStyle,
        "ref": "".concat(this.prefixCls, "-radar-dot")
      }, null)]) : null;
    },
    getRadarScanElem: function getRadarScanElem() {
      var borderColor = this.themeColor ? "".concat(this.themeColor, " transparent ").concat(this.themeColor, " transparent") : null;
      var borderColor2 = this.themeColor ? "transparent ".concat(this.themeColor, " transparent ").concat(this.themeColor) : null;
      return this.status.scanning ? _createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-scan")
      }, [_createVNode("div", {
        "class": "double-ring"
      }, [_createVNode("div", {
        "style": {
          borderColor: borderColor
        }
      }, null), _createVNode("div", {
        "style": {
          borderColor: borderColor2
        }
      }, null)])]) : null;
    },
    getRadarBeingElem: function getRadarBeingElem() {
      return this.status.being ? _createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-being")
      }, [_createTextVNode("...")]) : null;
    },
    getRadarSuccessElem: function getRadarSuccessElem() {
      var _this$themeColor;

      return this.status.success ? _createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-success ").concat(this.prefixCls, "-radar-success-icon")
      }, [_createVNode(VerifiedOutlined, {
        "style": {
          fontSize: "".concat(tools.pxToRem(20), "rem"),
          color: (_this$themeColor = this.themeColor) !== null && _this$themeColor !== void 0 ? _this$themeColor : null
        }
      }, null)]) : null;
    },
    getRadarTipElem: function getRadarTipElem() {
      var error = this.failed ? " ".concat(this.prefixCls, "-radar-tip-error") : '';
      var cls = "".concat(this.prefixCls, "-radar-tip").concat(error);
      var style = {
        height: this.height ? "".concat(tools.pxToRem(this.height), "rem") : null,
        color: this.status.success && this.themeColor ? this.themeColor : null
      };
      return _createVNode("div", {
        "class": cls,
        "style": style,
        "innerHTML": this.tip
      }, null);
    },
    getRadarLogoElem: function getRadarLogoElem() {
      var _this$logo;

      var height = this.height && this.height > 40 ? this.height : null;
      var top = Math.round((height - 20) / 2 * 100) / 100 - 1;
      var style = {
        top: height ? "".concat(tools.pxToRem(top), "rem") : null
      };
      return _createVNode("div", {
        "class": "".concat(this.prefixCls, "-radar-logo"),
        "style": style
      }, [_createVNode("a", {
        "href": this.target,
        "target": "_blank"
      }, [_createVNode("img", {
        "src": (_this$logo = this.logo) !== null && _this$logo !== void 0 ? _this$logo : this.avatar,
        "alt": this.powered
      }, null)])]);
    },
    getRadarElem: function getRadarElem() {
      var _ref, _this$borderColor, _this$bgColor;

      var cls = "".concat(this.prefixCls, "-radar").concat(this.status.success ? " ".concat(this.prefixCls, "-radar-pass") : '');
      var style = {
        borderRadius: this.radius ? "".concat(tools.pxToRem(this.radius), "rem") : null,
        borderColor: (_ref = (_this$borderColor = this.borderColor) !== null && _this$borderColor !== void 0 ? _this$borderColor : this.themeColor) !== null && _ref !== void 0 ? _ref : null,
        backgroundColor: (_this$bgColor = this.bgColor) !== null && _this$bgColor !== void 0 ? _this$bgColor : null,
        boxShadow: this.boxShadow ? this.boxShadowColor || this.themeColor ? "0 0 ".concat(tools.pxToRem(this.boxShadowBlur), "rem ").concat(this.boxShadowColor || this.themeColor) : 'none' : 'none'
      };
      return _createVNode("div", {
        "class": cls,
        "style": style
      }, [this.getRadarReadyElem(), this.getRadarScanElem(), this.getRadarBeingElem(), this.getRadarSuccessElem(), this.getRadarTipElem(), this.getRadarLogoElem()]);
    },
    getSuccessShowElem: function getSuccessShowElem() {
      var _this$themeColor2;

      var hex = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
      var rgb = /^(rgb|RGB)/;
      var cls = "".concat(this.prefixCls, "-success").concat(this.status.success ? " ".concat(this.prefixCls, "-success-show") : '');
      var backgroundColor = this.themeColor ? hex.test(this.themeColor) ? tools.colorHexToRgba(this.themeColor, 0.2) : rgb.test(this.themeColor) ? tools.colorHexToRgba(tools.colorRgbToHex(this.themeColor), 0.2) : this.themeColor : null;
      var style = {
        borderRadius: this.radius ? "".concat(this.radius, "px") : null,
        background: backgroundColor,
        borderColor: (_this$themeColor2 = this.themeColor) !== null && _this$themeColor2 !== void 0 ? _this$themeColor2 : null
      };
      return _createVNode("div", {
        "class": cls,
        "style": style
      }, null);
    },
    resetStatus: function resetStatus() {
      this.status.being = false;
      this.status.success = false;
      this.status.scanning = false;
      this.status.ready = true;
    }
  },
  render: function render() {
    var _this5 = this;

    var _slot;

    var cls = "".concat(this.prefixCls).concat(tools.isMobile() ? " ".concat(this.prefixCls, "-mobile") : '');
    var width = tools.isNumber(this.width) ? "".concat(tools.pxToRem(this.width), "rem") : this.width ? /%/g.test(this.width) ? this.width : "".concat(tools.pxToRem(parseInt(this.width)), "rem") : null;
    var height = tools.isNumber(this.height) ? "".concat(tools.pxToRem(this.height), "rem") : this.height ? /%/g.test(this.height) ? this.height : "".concat(tools.pxToRem(this.height), "rem") : null;
    var style = {
      width: width,
      height: height
    };
    var modal = this.modal.show || this.modal._instance ? _createVNode(Teleport, {
      "to": document.body,
      "ref": this.saveCaptchaModal
    }, _isSlot(_slot = _createVNode(CaptchaModal, {
      "position": this.modal.position,
      "maxTries": this.maxTries,
      "show": this.modal.show,
      "mask": this.mask,
      "maskClosable": this.maskClosable,
      "boxShadow": this.modalBoxShadow,
      "boxShadowBlur": this.modalBoxShadowBlur,
      "boxShadowColor": this.modalBoxShadowColor,
      "themeColor": this.themeColor,
      "bgColor": this.modalBgColor,
      "verifyParams": this.verifyParams,
      "verifyAction": this.verifyAction,
      "onModalClose": this.closeCaptchaModal,
      "image": this.image
    }, null)) ? _slot : {
      default: function _default() {
        _newArrowCheck(this, _this5);

        return [_slot];
      }.bind(this)
    }) : null;
    return _createVNode("div", {
      "class": cls,
      "onClick": this.showCaptchaModal,
      "ref": this.prefixCls,
      "key": this.prefixCls
    }, [_createVNode("div", {
      "class": "".concat(this.prefixCls, "-content"),
      "style": style
    }, [this.getRadarElem(), this.getSuccessShowElem()]), modal]);
  }
});