import { Fragment as _Fragment } from "vue";
import { isVNode as _isVNode } from "vue";
import { createTextVNode as _createTextVNode } from "vue";
import { createVNode as _createVNode } from "vue";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError("Cannot instantiate an arrow function"); } }

import { defineComponent } from 'vue';
import axios from 'axios';
import { CloseCircleOutlined, ReloadOutlined, QuestionCircleOutlined } from '@ant-design/icons-vue';
import { Tooltip } from 'makeit-tooltip';
import PropTypes from '../utils/props';
import tools from '../utils/tools';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !_isVNode(s);
}

var prefixCls = 'mi-captcha-modal';
var selectors = {
  modal: prefixCls,
  image: "".concat(prefixCls, "-image"),
  block: "".concat(prefixCls, "-block"),
  slider: "".concat(prefixCls, "-slider"),
  mask: "".concat(prefixCls, "-mask"),
  result: "".concat(prefixCls, "-result"),
  content: "".concat(prefixCls, "-content")
};
var urlReg = /^((https|http|ftp|rtsp|mms)?:\/\/)(([0-9A-Za-z_!~*'().&=+$%-]+: )?[0-9A-Za-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9A-Za-z_!~*'()-]+.)*([0-9A-Za-z][0-9A-Za-z-]{0,61})?[0-9A-Za-z].[A-Za-z]{2,6})(:[0-9]{1,4})?((\/?)|(\/[0-9A-Za-z_!~*'().;?:@&=+$,%#-]+)+\/?)$/;
export default defineComponent({
  name: 'MiCaptchaModal',
  props: {
    show: PropTypes.bool.def(false),
    image: PropTypes.string,
    position: PropTypes.object,
    mask: PropTypes.bool.def(true),
    maskClosable: PropTypes.bool.def(true),
    themeColor: PropTypes.string,
    bgColor: PropTypes.string,
    boxShadow: PropTypes.bool.def(true),
    boxShadowColor: PropTypes.string,
    boxShadowBlur: PropTypes.number.def(6),
    maxTries: PropTypes.number.def(5),
    verifyParams: PropTypes.object.def({}),
    verifyAction: PropTypes.string,
    onModalClose: PropTypes.func
  },
  data: function data() {
    return {
      prefixCls: 'mi-captcha-modal',
      loading: true,
      background: 'https://file.makeit.vip/MIIT/M00/00/00/ajRkHV7d0JOAJYSMAAFwUxGzMIc287.jpg',
      target: 'https://admin.makeit.vip/components/captcha',
      avatar: 'https://file.makeit.vip/MIIT/M00/00/00/ajRkHV_pUyOALE2LAAAtlj6Tt_s370.png',
      powered: 'Powered By makeit.vip',
      ctx: {
        image: null,
        block: null
      },
      elements: {
        slider: null,
        block: null
      },
      coordinate: {
        x: 0,
        y: 0,
        offset: 6
      },
      size: {
        width: 260,
        height: 160
      },
      block: {
        size: 42,
        radius: 8,
        PI: Math.PI,
        real: 0
      },
      drag: {
        moving: false,
        originX: 0,
        originY: 0,
        offset: 0
      },
      time: {
        start: null,
        end: null
      },
      check: {},
      _background: null
    };
  },
  watch: {
    show: function show(value) {
      var _this = this;

      if (value) {
        this.$nextTick(function () {
          _newArrowCheck(this, _this);

          this.init();
        }.bind(this));
      }
    }
  },
  beforeUnmount: function beforeUnmount() {
    tools.off(this.elements.slider, 'pointerdown', this.dragStart);
    tools.off(this.elements.slider, 'touchstart', this.dragStart);
    tools.off(document.body, 'pointermove', this.dragMoving);
    tools.off(document.body, 'touchmove', this.dragMoving);
    tools.off(document.body, 'pointerup', this.dragEnd);
    tools.off(document.body, 'touchend', this.dragEnd);
  },
  mounted: function mounted() {
    this.init();
  },
  methods: {
    init: function init() {
      var _this$image;

      this._background = (_this$image = this.image) !== null && _this$image !== void 0 ? _this$image : this.background;
      this.initModal();
    },
    initModal: function initModal() {
      var slider = this.$refs["".concat(selectors.slider, "-btn")];
      var block = this.$refs[selectors.block];
      this.elements = {
        slider: slider,
        block: block
      };
      this.block.real = this.block.size + this.block.radius * 2 + 2;
      this.setCheckData();
      this.initCaptcha();
      tools.on(this.elements.slider, 'pointerdown', this.dragStart);
      tools.on(this.elements.slider, 'touchstart', this.dragStart);
      tools.on(document.body, 'pointermove', this.dragMoving);
      tools.on(document.body, 'touchmove', this.dragMoving);
      tools.on(document.body, 'pointerup', this.dragEnd);
      tools.on(document.body, 'touchend', this.dragEnd);
      tools.on(document.body, 'pointerup', this.dragFinish);
    },
    refreshCaptcha: function refreshCaptcha() {
      this.loading = true;
      this.setCheckData();
      var block = this.$refs[selectors.block];
      block.width = this.size.width;
      this.ctx.image.clearRect(0, 0, this.size.width, this.size.height);
      this.ctx.block.clearRect(0, 0, this.size.width, this.size.height);
      this.initImageElem();
    },
    initCaptcha: function initCaptcha() {
      var image = this.$refs[selectors.image];
      var block = this.$refs[selectors.block];
      var imageCtx = image ? image.getContext('2d') : null;
      var blockCtx = block ? block.getContext('2d') : null;
      this.ctx = {
        image: imageCtx,
        block: blockCtx
      };
      /**
       * 图片统一转为 base64, 避免跨域问题.
       * 也可采用xhr异步请求图片地址.
       * ```
       * if (this.$g.regExp.url.test(this.background)) {
       *     const xhr = new XMLHttpRequest();
       *     xhr.onload = function() {
       *         if (this.status === 200) {
       *             // 注意 this 指向.
       *             const url = URL.createObjectURL(this.response);
       *             vm.background = url;
       *             vm.initImageElem();
       *             // ...
       *             URL.revokeObjectURL(url);
       *         }
       *     }
       *     xhr.open('GET', this.background, true);
       *     xhr.responseType = 'blob';
       *     xhr.send();
       * } else {
       *     this.initImageElem();
       * }
       * ```
       */

      if (urlReg.test(this._background)) this.imageToBase64(this.initImageElem);else this.initImageElem();
    },
    initImage: function initImage(elem) {
      if (this.ctx.image && this.ctx.block) {
        /** image */
        this.ctx.image.drawImage(elem, 0, 0, this.size.width, this.size.height);
        /** text */

        this.ctx.image.beginPath();
        this.ctx.image.fillStyle = '#FFF';
        this.ctx.image.shadowColor = 'transparent';
        this.ctx.image.shadowBlur = 0;
        this.ctx.image.font = 'bold 24px MicrosoftYaHei';
        this.ctx.image.fillText('拖动滑块拼合图片', 12, 30);
        this.ctx.image.font = '16px MicrosoftYaHei';
        this.ctx.image.fillText('就能验证成功哦', 12, 55);
        this.ctx.image.closePath();
        /** block */

        this.ctx.block.save();
        this.ctx.block.globalCompositeOperation = 'destination-over';
        this.drawBlockPosition();
        this.ctx.block.drawImage(elem, 0, 0, this.size.width, this.size.height);
        /** image data */

        var coordinateY = this.coordinate.y - this.block.radius * 2 + 1;
        var imageData = this.ctx.block.getImageData(this.coordinate.x, coordinateY, this.block.real, this.block.real);
        var block = this.$refs[selectors.block];
        block.width = this.block.real;
        this.ctx.block.putImageData(imageData, this.coordinate.offset, coordinateY);
        this.ctx.block.restore();
        this.loading = false;
      }
    },
    initImageElem: function initImageElem() {
      var _this2 = this;

      var elem = new Image();
      elem.src = this._background;

      elem.onload = function () {
        _newArrowCheck(this, _this2);

        return this.initImage(elem);
      }.bind(this);
    },
    imageToBase64: function imageToBase64(callback) {
      var _this3 = this;

      var elem = new Image();
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      canvas.width = this.size.width;
      canvas.height = this.size.height;
      elem.crossOrigin = '';
      elem.src = this._background;

      elem.onload = function () {
        _newArrowCheck(this, _this3);

        ctx.drawImage(elem, 0, 0, this.size.width, this.size.height);
        this._background = canvas.toDataURL();
        if (callback) callback.apply(this);
      }.bind(this);
    },
    drawBlock: function drawBlock(ctx) {
      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var operation = arguments.length > 2 ? arguments[2] : undefined;
      ctx.beginPath();
      ctx.moveTo(this.coordinate.x, this.coordinate.y);
      var direct = direction.direction;
      var type = direction.type;
      /** top */

      if (direct === 'top') {
        ctx.arc(this.coordinate.x + this.block.size / 2, this.coordinate.y, this.block.radius, -this.block.PI, 0, type === 'inner');
      }

      ctx.lineTo(this.coordinate.x + this.block.size, this.coordinate.y);
      /** right */

      if (direct === 'right') {
        ctx.arc(this.coordinate.x + this.block.size, this.coordinate.y + this.block.size / 2, this.block.radius, 1.5 * this.block.PI, 0.5 * this.block.PI, type === 'inner');
      }

      ctx.lineTo(this.coordinate.x + this.block.size, this.coordinate.y + this.block.size);
      /** bottom */

      ctx.arc(this.coordinate.x + this.block.size / 2, this.coordinate.y + this.block.size, this.block.radius, 0, this.block.PI, true);
      ctx.lineTo(this.coordinate.x, this.coordinate.y + this.block.size);
      /** left */

      ctx.arc(this.coordinate.x, this.coordinate.y + this.block.size / 2, this.block.radius, 0.5 * this.block.PI, 1.5 * this.block.PI, true);
      ctx.lineTo(this.coordinate.x, this.coordinate.y);
      ctx.shadowColor = 'rgba(0, 0, 0, .001)';
      ctx.shadowBlur = 20;
      ctx.lineWidth = 1.5;
      ctx.fillStyle = 'rgba(0, 0, 0, .4)';
      ctx.strokeStyle = 'rgba(255, 255, 255, .8)';
      ctx.stroke();
      ctx.closePath();
      ctx[operation]();
    },
    drawBlockPosition: function drawBlockPosition() {
      var x = tools.randomNumberInRange(this.block.real + 20, this.size.width - (this.block.real + 20));
      var y = tools.randomNumberInRange(55, this.size.height - 55);
      var direction = this.drawBlockDirection();
      this.coordinate.x = x;
      this.coordinate.y = y;
      this.drawBlock(this.ctx.image, direction, 'fill');
      this.drawBlock(this.ctx.block, direction, 'clip');
    },
    drawBlockDirection: function drawBlockDirection() {
      var direction = {
        top: 'top',
        right: 'right'
      };
      var from = ['inner', 'outer'];
      var result = {};
      var keys = Object.keys(direction);
      var key = keys[Math.floor(Math.random() * keys.length)];
      result.direction = direction[key];
      result.type = from[Math.floor(Math.random() * from.length)];
      return result;
    },
    getBoundingClientRect: function getBoundingClientRect(elem) {
      var specific = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var rect = elem.getBoundingClientRect();
      if (specific && rect[specific]) return rect[specific];
      return rect;
    },
    dragStart: function dragStart(event) {
      var x = event.clientX || event.touches[0].clientX;
      var sliderRef = this.$refs[selectors.slider];
      var sliderBtnRef = this.$refs["".concat(selectors.slider, "-btn")];
      var sliderRect = this.getBoundingClientRect(sliderRef);
      var sliderBtnRect = this.getBoundingClientRect(sliderBtnRef);
      this.drag.originX = Math.round(sliderRect.left * 10) / 10;
      this.drag.originY = Math.round(sliderRect.top * 10) / 10;
      this.drag.offset = Math.round((x - sliderBtnRect.left) * 10) / 10;
      this.drag.moving = true;
      this.time.start = Date.now();
    },
    dragMoving: function dragMoving(event) {
      if (!this.drag.moving || this.check.being) return;
      var x = event.clientX || event.touches[0].clientX;
      var moveX = Math.round((x - this.drag.originX - this.drag.offset) * 10) / 10;
      moveX = moveX <= 0 ? 0 : moveX;

      if (moveX + 54 >= this.size.width) {
        this.checkVerificationCode();
        return false;
      }

      this.elements.slider.style.left = "".concat(moveX, "px");
      this.elements.block.style.left = "".concat(moveX, "px");
      this.check.value = moveX;
    },
    dragEnd: function dragEnd() {
      if (!this.drag.moving) return;
      this.time.end = Date.now();
      this.checkVerificationCode();
    },
    dragFinish: function dragFinish() {
      this.dragEnd();
    },
    dragReset: function dragReset() {
      this.elements.slider.style.left = 0;
      this.elements.block.style.left = 0;
      this.drag.originX = 0;
      this.drag.originY = 0;
    },
    checkVerificationCode: function checkVerificationCode() {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this7 = this;

        var coordinateX, error, succcess, taking, result;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                coordinateX = Math.round(_this4.check.value + _this4.coordinate.offset);

                if (!_this4.check.being) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                _this4.check.being = true;

                error = function error() {
                  var _this5 = this;

                  var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                  setTimeout(function () {
                    _newArrowCheck(this, _this5);

                    _this4.dragReset();
                  }.bind(this), 1000);
                  _this4.check.num++;
                  _this4.check.correct = false;
                  if (msg) _this4.check.tip = msg;
                };

                if (!(_this4.coordinate.x - 2 <= coordinateX && _this4.coordinate.x + 2 >= coordinateX)) {
                  _context.next = 18;
                  break;
                }

                succcess = function succcess() {
                  var _this6 = this;

                  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                  setTimeout(function () {
                    _newArrowCheck(this, _this6);

                    _this4.closeModal('success', data);
                  }.bind(this), 600);
                };

                taking = Math.round((_this4.time.end - _this4.time.start) / 10) / 100;
                _this4.check.tip = "".concat(taking, "s\u901F\u5EA6\u5B8C\u6210\u56FE\u7247\u62FC\u5408\u9A8C\u8BC1");

                if (!_this4.verifyAction) {
                  _context.next = 14;
                  break;
                }

                _context.next = 12;
                return axios.post(_this4.verifyAction, _this4.verifyParams).then(function (res) {
                  _newArrowCheck(this, _this7);

                  var response = res.data;

                  if (response.ret.code === 1) {
                    _this4.check.correct = true;
                    succcess(response.data);
                  } else error(response.ret.message);
                }.bind(this)).catch(function (err) {
                  _newArrowCheck(this, _this7);

                  error(err.message);
                }.bind(this));

              case 12:
                _context.next = 16;
                break;

              case 14:
                _this4.check.correct = true;
                succcess();

              case 16:
                _context.next = 19;
                break;

              case 18:
                error();

              case 19:
                result = _this4.$refs[selectors.result];
                if (result) result.style.bottom = 0;
                if (_this4.check.num <= _this4.check.tries) _this4.check.show = true;
                setTimeout(function () {
                  _newArrowCheck(this, _this7);

                  _this4.drag.moving = false;
                  if (result) result.style.bottom = '-32px';
                }.bind(this), 1000);
                setTimeout(function () {
                  _newArrowCheck(this, _this7);

                  _this4.check.show = false;
                  _this4.check.being = false;
                  if (_this4.check.num >= _this4.check.tries) _this4.closeModal('frequently');
                }.bind(this), 1600);

              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }))();
    },
    setCheckData: function setCheckData() {
      var _this$tries;

      this.check = {
        tries: (_this$tries = this.tries) !== null && _this$tries !== void 0 ? _this$tries : 5,
        num: 0,
        being: false,
        value: null,
        correct: false,
        tip: '拖动滑块将悬浮图像正确拼合',
        show: false
      };
    },
    closeModal: function closeModal() {
      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'close';
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.loading = true;
      if (typeof status !== 'string') status = 'close';
      if (this.maskClosable) this.$emit('modalClose', {
        status: status,
        data: data
      });
    },
    getArrowElem: function getArrowElem() {
      var arrowCls = "".concat(this.prefixCls, "-arrow");
      var inStyle = {
        borderColor: this.bgColor ? "transparent ".concat(this.bgColor, " transparent transparent") : null
      };
      var outStyle = {
        borderColor: this.themeColor ? "transparent ".concat(this.themeColor, " transparent transparent") : null
      };
      return _createVNode("div", {
        "class": arrowCls
      }, [_createVNode("div", {
        "class": "".concat(arrowCls, "-out"),
        "style": outStyle
      }, null), _createVNode("div", {
        "class": "".concat(arrowCls, "-in"),
        "style": inStyle
      }, null)]);
    },
    getMaskElem: function getMaskElem() {
      return this.mask && this.show ? _createVNode("div", {
        "class": "".concat(selectors.mask),
        "onClick": this.closeModal,
        "ref": "".concat(selectors.mask)
      }, null) : null;
    },
    getContentLoadingElem: function getContentLoadingElem() {
      var _this$themeColor, _this$themeColor2;

      var loadingCls = "".concat(this.prefixCls, "-loading");
      var style1 = {
        borderColor: (_this$themeColor = this.themeColor) !== null && _this$themeColor !== void 0 ? _this$themeColor : null
      };
      var style2 = {
        background: (_this$themeColor2 = this.themeColor) !== null && _this$themeColor2 !== void 0 ? _this$themeColor2 : null
      };
      return this.loading ? _createVNode("div", {
        "class": loadingCls
      }, [_createVNode("div", {
        "class": "".concat(loadingCls, "-spinner")
      }, [_createVNode("div", {
        "class": "load"
      }, [_createVNode("div", null, [_createVNode("div", null, [_createVNode("div", {
        "style": style1
      }, null), _createVNode("div", {
        "style": style2
      }, null)])])])]), _createVNode("div", {
        "class": "".concat(loadingCls, "-tip")
      }, [_createTextVNode("\u6B63\u5728\u52A0\u8F7D\u9A8C\u8BC1\u7801")])]) : null;
    },
    getContentInfoElem: function getContentInfoElem() {
      return _createVNode("div", {
        "class": "".concat(this.prefixCls, "-info")
      }, [_createVNode("canvas", {
        "width": this.size.width,
        "height": this.size.height,
        "ref": "".concat(selectors.image)
      }, null), _createVNode("canvas", {
        "width": this.size.width,
        "height": this.size.height,
        "ref": "".concat(selectors.block)
      }, null)]);
    },
    getContentResultElem: function getContentResultElem() {
      var cls = "".concat(selectors.result, " ").concat(this.check.correct ? "".concat(selectors.result, "-success") : "".concat(selectors.result, "-error"));
      return _createVNode("div", {
        "class": cls,
        "ref": selectors.result,
        "innerHTML": this.check.tip
      }, null);
    },
    getSliderTrackElem: function getSliderTrackElem() {
      var _this$themeColor3;

      var sliderTrackCls = "".concat(selectors.slider, "-track");
      var style = {
        borderColor: (_this$themeColor3 = this.themeColor) !== null && _this$themeColor3 !== void 0 ? _this$themeColor3 : null
      };
      return _createVNode("div", {
        "class": sliderTrackCls,
        "style": style
      }, [_createVNode("span", {
        "class": "".concat(sliderTrackCls, "-tip").concat(this.drag.moving ? ' hide' : '')
      }, [_createTextVNode("\u62D6\u52A8\u5DE6\u8FB9\u6ED1\u5757\u5B8C\u6210\u4E0A\u65B9\u62FC\u56FE")])]);
    },
    getSliderBtnElem: function getSliderBtnElem() {
      var _this$themeColor4, _this$themeColor5;

      var sliderBtnCls = "".concat(selectors.slider, "-btn");
      var style = {
        borderColor: (_this$themeColor4 = this.themeColor) !== null && _this$themeColor4 !== void 0 ? _this$themeColor4 : null
      };
      return _createVNode("div", {
        "class": sliderBtnCls,
        "style": style,
        "ref": sliderBtnCls
      }, [_createVNode("div", {
        "class": "".concat(sliderBtnCls, "-icon"),
        "style": style
      }, [_createVNode("div", {
        "class": "".concat(sliderBtnCls, "-vertical")
      }, null), _createVNode("div", {
        "class": "".concat(sliderBtnCls, "-horizontal"),
        "style": {
          background: (_this$themeColor5 = this.themeColor) !== null && _this$themeColor5 !== void 0 ? _this$themeColor5 : null
        }
      }, null)])]);
    },
    getPanelActionElem: function getPanelActionElem() {
      var _this8 = this;

      var _slot, _slot2, _slot3;

      var panelActionCls = "".concat(this.prefixCls, "-panel-action");
      return _createVNode("div", {
        "class": panelActionCls
      }, [_createVNode(Tooltip, {
        "title": "关闭验证",
        "autoAdjust": false,
        "bgColor": this.themeColor
      }, _isSlot(_slot = _createVNode(CloseCircleOutlined, {
        "onClick": this.closeModal
      }, null)) ? _slot : {
        default: function _default() {
          _newArrowCheck(this, _this8);

          return [_slot];
        }.bind(this)
      }), _createVNode(Tooltip, {
        "title": "刷新验证",
        "autoAdjust": false,
        "bgColor": this.themeColor
      }, _isSlot(_slot2 = _createVNode(ReloadOutlined, {
        "onClick": this.refreshCaptcha
      }, null)) ? _slot2 : {
        default: function _default() {
          _newArrowCheck(this, _this8);

          return [_slot2];
        }.bind(this)
      }), _createVNode(Tooltip, {
        "title": "帮助反馈",
        "autoAdjust": false,
        "bgColor": this.themeColor
      }, _isSlot(_slot3 = _createVNode("a", {
        "href": this.target,
        "target": "_blank"
      }, [_createVNode(QuestionCircleOutlined, null, null)])) ? _slot3 : {
        default: function _default() {
          _newArrowCheck(this, _this8);

          return [_slot3];
        }.bind(this)
      })]);
    },
    getPanelCopyrightElem: function getPanelCopyrightElem() {
      var copyrightCls = "".concat(this.prefixCls, "-copyright");
      return _createVNode("div", {
        "class": copyrightCls
      }, [_createVNode("div", {
        "class": "".concat(copyrightCls, "-text")
      }, [_createVNode("a", {
        "href": this.target,
        "target": "_blank"
      }, [_createVNode("img", {
        "src": this.avatar,
        "alt": this.powered
      }, null)]), _createVNode("span", null, [_createTextVNode("\u63D0\u4F9B\u6280\u672F\u652F\u6301")])])]);
    },
    getContentElem: function getContentElem() {
      var _this$themeColor6, _this$bgColor;

      var style = {
        borderColor: (_this$themeColor6 = this.themeColor) !== null && _this$themeColor6 !== void 0 ? _this$themeColor6 : null,
        background: (_this$bgColor = this.bgColor) !== null && _this$bgColor !== void 0 ? _this$bgColor : null,
        boxShadow: this.boxShadow && (this.boxShadowColor || this.themeColor) ? "0 0 ".concat(tools.pxToRem(this.boxShadowBlur), "rem ").concat(this.boxShadowColor || this.themeColor) : null
      };
      return _createVNode("div", {
        "class": selectors.content,
        "style": style,
        "ref": selectors.content
      }, [_createVNode("div", {
        "class": "".concat(this.prefixCls, "-wrap")
      }, [_createVNode("div", {
        "class": "".concat(this.prefixCls, "-embed")
      }, [this.getContentLoadingElem(), this.getContentInfoElem(), this.getContentResultElem()]), _createVNode("div", {
        "class": "".concat(selectors.slider).concat(this.drag.moving ? " ".concat(selectors.slider, "-moving") : ''),
        "ref": selectors.slider
      }, [this.getSliderTrackElem(), this.getSliderBtnElem()])]), _createVNode("div", {
        "class": "".concat(this.prefixCls, "-panel")
      }, [this.getPanelActionElem(), this.getPanelCopyrightElem()])]);
    }
  },
  render: function render() {
    var style = {
      top: "".concat(tools.pxToRem(this.position.top), "rem"),
      left: "".concat(tools.pxToRem(this.position.left), "rem")
    };
    var cls = "".concat(this.prefixCls).concat(!this.check.correct && this.check.show ? " ".concat(this.prefixCls, "-error") : '');
    return this.show ? _createVNode(_Fragment, null, [this.getMaskElem(), _createVNode("div", {
      "class": cls,
      "style": style,
      "ref": this.prefixCls
    }, [this.getArrowElem(), this.getContentElem()])]) : null;
  }
});