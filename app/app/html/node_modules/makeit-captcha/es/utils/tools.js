function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MiTools = /*#__PURE__*/function () {
  function MiTools() {
    _classCallCheck(this, MiTools);
  }

  _createClass(MiTools, [{
    key: "isMobile",

    /**
     * Whether it is a mobile phone.
     * @returns {boolean}
     */
    value: function isMobile() {
      var agent = navigator.userAgent,
          agents = ['Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod'];
      var mobile = false;

      for (var i = 0, len = agents.length; i < len; i++) {
        if (agent.indexOf(agents[i]) > 0) {
          mobile = true;
          break;
        }
      }

      return mobile;
    }
    /**
     * Whether it is a number.
     * @param number
     */

  }, {
    key: "isNumber",
    value: function isNumber(number) {
      return typeof number === 'number' && isFinite(number);
    }
    /**
     * Unit conversion.
     * @param value
     */

  }, {
    key: "pxToRem",
    value: function pxToRem(value) {
      return Math.round(value / 16 * 100) / 100;
    }
    /**
     * Generate a random number within the specified range.
     * @param start
     * @param end
     * @returns {number}
     */

  }, {
    key: "randomNumberInRange",
    value: function randomNumberInRange(start, end) {
      return Math.round(Math.random() * (end - start) + start);
    }
    /**
     * Event binding.
     * @param element
     * @param event
     * @param listener
     * @param useCapture
     */

  }, {
    key: "on",
    value: function on(element, event, listener) {
      var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (!!document.addEventListener) {
        if (element && event && listener) element.addEventListener(event, listener, useCapture);
      } else {
        if (element && event && listener) element.attachEvent("on".concat(event), listener);
      }
    }
    /**
     * Event unbind.
     * @param element
     * @param event
     * @param listener
     * @param useCapture
     */

  }, {
    key: "off",
    value: function off(element, event, listener) {
      var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (!!document.addEventListener) {
        if (element && event && listener) element.removeEventListener(event, listener, useCapture);
      } else {
        if (element && event && listener) element.detachEvent("on".concat(event), listener);
      }
    }
    /**
     * convert color.
     * @param color
     * @param opacity
     */

  }, {
    key: "colorHexToRgba",
    value: function colorHexToRgba(color) {
      var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;

      if (reg.test(color)) {
        if (color.length === 4) {
          var newColor = '#';

          for (var i = 1; i < 4; i++) {
            newColor += color.slice(i, i + 1).concat(color.slice(i, i + 1));
          }

          color = newColor;
        }

        var changeColor = [];

        for (var _i = 1; _i < 7; _i += 2) {
          changeColor.push(parseInt('0x' + color.slice(_i, _i + 2)));
        }

        return "rgba(".concat(changeColor.join(','), ", ").concat(opacity, ")");
      } else {
        return color;
      }
    }
    /**
     * convert color.
     * @param color
     */

  }, {
    key: "colorRgbToHex",
    value: function colorRgbToHex(color) {
      var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;

      if (/^(rgb|RGB)/.test(color)) {
        var aColor = color.replace(/(?:\(|\)|rgb|RGB)*/g, '').split(',');
        var strHex = '#';

        for (var i = 0; i < aColor.length; i++) {
          var hex = Number(aColor[i]).toString(16);
          if (hex === '0') hex += hex;
          strHex += hex;
        }

        if (strHex.length !== 7) strHex = color;
        return strHex;
      } else if (reg.test(color)) {
        var aNum = color.replace(/#/, '').split('');

        if (aNum.length === 6) {
          return color;
        } else if (aNum.length === 3) {
          var numHex = '#';

          for (var _i2 = 0; _i2 < aNum.length; _i2 += 1) {
            numHex += aNum[_i2] + aNum[_i2];
          }

          return numHex;
        }
      } else {
        return color;
      }
    }
  }]);

  return MiTools;
}();

export default new MiTools();